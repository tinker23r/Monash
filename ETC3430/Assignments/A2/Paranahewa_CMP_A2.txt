---
title: "ETC3430 Assignment 2"
author: "Chelaka Paranahewa"
output: 
  pdf_document:
    fig_crop: false
---
    
<!-- For the datasets make sure to remove the watermark at the top of the files -->

```{r Setup, echo=FALSE, warning=FALSE, message=FALSE}
rm(list = ls())
library(knitr)
library(tidyverse)
set.seed(31455034)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.width = 10, fig.height = 5)
```



# Question 1

```{r LC Model Data Preparation}
# Limiting to Years 1975 - 2015 & Ages 0 - 99
death <- read.delim(file = "Data/Deaths_1x1.txt", sep = "") %>%
    filter(1975 <= Year, Year <= 2015, Age != "110+") %>%
    select(-Female, -Male) %>%
    mutate(Age = strtoi(Age)) %>%
    filter(Age < 100)


# Limiting to Years 1975 - 2015 & Ages 0 - 99
exposure <- read.delim(file = "Data/Exposures_1x1.txt", sep = "") %>%
    filter(1975 <= Year, Year <= 2015, Age != "110+") %>%
    select(-Female, -Male) %>%
    mutate(Age = strtoi(Age)) %>%
    filter(Age < 100)

age <- max(death$Age) - min(death$Age) + 1
year <- 2015 - 1975 + 1

# Death Array
d <- array(NA, c(age, year))

# Exposure Array
e <- array(NA, c(age, year))

# Central Death Rate Array
# m_(x, t) ≈ d_(x,t) / E_(x,t)
m <- array(NA, c(age, year + 45))

# Dataset age incrementer
h <- 1

for (t in 1:year) {
    for (x in 1:age) {
        d[x, t] <- death$Total[h]
        e[x, t] <- exposure$Total[h]
        m[x, t] <- d[x, t] / e[x, t]
        h <- h + 1
    }
}
```


```{r LC Model}
# Overall mortality level
a <- numeric()

for (x in 1:age) {
    a[x] <- mean(log(m[x, 1:year]))
}

info <- array(NA, c(age, year))

# Demeaned mortality data
for (x in 1:age) {
    for (t in 1:year) {
        info[x, t] <- log(m[x, t]) - a[x]
    }
}

pca <- svd(info, 1, 1)
# X = UDV'
# U: orthogonal matrix
# V: orthogonal matrix
# D: diagonal matrix

# Age-specific sensitivity of log death
b <- pca$u / sum(pca$u)

# Mortality index
k <- sum(pca$u) * pca$d[1] * pca$v
```


```{r LC Model Plots, fig.show="hold", out.width="100%"}
plot(c(0:99), a, xlab = "age", ylab = "a(x)", xlim = c(0, 100), type = "l")
plot(c(0:99), b, xlab = "age", ylab = "b(x)", xlim = c(0, 100), type = "l")
plot(c(1975:2015), k[1:year], xlab = "year", ylab = "k(t)", xlim = c(1970, 2020), type = "l")
```


```{r Projecting LC Model}
# Bivariate random walk with drift Term
mu <- (k[year] - k[1]) / (year - 1)
for (t in 1:45) {
    # Random Walk with Drift
    k[year + t] <- k[year + t - 1] + mu
    for (x in 1:age) {
        m[x, year + t] <- exp(a[x] + b[x] * k[year + t])
    }
}
```


```{r LC Model Simulation}
sigma <- sd(k[2:year] - k[1:(year - 1)])

# Future Central Death Rate Array
mf <- array(NA, c(age, year + 45, 1000))

# Future Mortality index
kf <- array(NA, c(year + 45, 1000))
# 1000 simulations
# rnorm(1): simulated error with mean 0 and variance 1
# sigma*rnorm(1)
for (z in 1:1000) {
    mf[1:age, 1:year, z] <- m[1:age, 1:year]
    kf[1:year, z] <- k[1:year]
    for (t in 1:45) {
        # Random Walk with Drift and noise added
        kf[year + t, z] <- kf[year + t - 1, z] + mu + sigma * rnorm(1)
        for (x in 1:age) {
            mf[x, year + t, z] <- exp(a[x] + b[x] * kf[year + t, z])
        }
    }
}

# 95% preidciton interval

# 97.5% quantile: upper end
upper <- numeric()
# 2.5% quantile: lower end
lower <- numeric()
for (t in 1:45) {
    upper[t] <- quantile(mf[60, year + t, 1:1000], 0.975)
    lower[t] <- quantile(mf[60, year + t, 1:1000], 0.025)
}

plot(
    c(1975:2015), log(m[60, 1:year]),
    xlim = c(1975, 2060), type = "l", ylim = c(-7, -4),
    xlab = "year", ylab = "log m(60,t)",
    main = "Log of Central Mortality Rate for 60 Year-Olds (LC Model)"
)
lines(c(2016:2060), log(m[60, (year + 1):(year + 45)]), lty = 2, col = 2)
lines(c(2016:2060), log(upper), lty = 3, col = 2)
lines(c(2016:2060), log(lower), lty = 3, col = 2)
```


```{r LC Cohort Life Expectancy}
LC_Cohort_Life_Expectancy <- exp(-m[60, year])

for (t in 1:(99 - 60)) {
    LC_Cohort_Life_Expectancy <- LC_Cohort_Life_Expectancy * exp(-m[60 + t, year + t])
    if (LC_Cohort_Life_Expectancy >= 0.5) lce_age <- 60 + t
}
# LC_Cohort_Life_Expectancy
```

According to the LC Model, the Cohort Life Expectancy of a 60 year old in 2016 will live to `r lce_age`

```{r CBD Model Data Preparation}
# Limiting to Years 1975 - 2015 & Ages 0 - 99
death <- read.delim(file = "Data/Deaths_1x1.txt", sep = "") %>%
    filter(1975 <= Year, Year <= 2015, Age != "110+") %>%
    select(-Female, -Male) %>%
    mutate(Age = strtoi(Age)) %>%
    filter(Age >= 60, Age < 100)


# Limiting to Years 1975 - 2015 & Ages 0 - 99
exposure <- read.delim(file = "Data/Exposures_1x1.txt", sep = "") %>%
    filter(1975 <= Year, Year <= 2015, Age != "110+") %>%
    select(-Female, -Male) %>%
    mutate(Age = strtoi(Age)) %>%
    filter(Age >= 60, Age < 100)

age <- max(death$Age) - min(death$Age) + 1
year <- 2015 - 1975 + 1

# Death Array
d <- array(NA, c(age, year))

# Exposure Array
e <- array(NA, c(age, year))

# Central Death Rate Array
# m_(x, t) ≈ d_(x,t) / E_(x,t)
m <- array(NA, c(age, year))

# Mortality Rate Array
q <- array(NA, c(age, year + 45))

# Dataset age incrementer
h <- 1

for (t in 1:year) {
    for (x in 1:age) {
        d[x, t] <- death$Total[h]
        e[x, t] <- exposure$Total[h]
        m[x, t] <- d[x, t] / e[x, t]
        q[x, t] <- 1 - exp(-(d[x, t] / e[x, t]))
        h <- h + 1
    }
}
```


```{r CBD Model}
xbar <- mean(c(60:99))
co <- c(60:99) - xbar

# Level of mortality curve
kappa_1 <- numeric()

# Gradient of mortality curve
kappa_2 <- numeric()

for (t in 1:year) {
    fit <- lm(log(q[1:age, t] / (1 - q[1:age, t])) ~ co)
    kappa_1[t] <- fit$coef[1]
    kappa_2[t] <- fit$coef[2]
}
```


```{r CBD Model Plots, fig.show="hold", out.width="100%"}
plot(
    c(1975:2015), kappa_1[1:year],
    xlab = "year", ylab = "k1(t)", xlim = c(1975, 2020), type = "l",
    main = "Kappa_1(t)"
)

plot(
    c(1975:2015), kappa_2[1:year],
    xlab = "year", ylab = "k2(t)", xlim = c(1975, 2020), type = "l",
    main = "Kappa_2(t)"
)
```


```{r Projecting CBD Model}
# Bivaraite random walk with drift Term
mu1 <- (kappa_1[year] - kappa_1[1]) / (year - 1)
# Bivaraite random walk with drift Term
mu2 <- (kappa_2[year] - kappa_2[1]) / (year - 1)

for (t in 1:45) {
    kappa_1[year + t] <- kappa_1[year + t - 1] + mu1
    kappa_2[year + t] <- kappa_2[year + t - 1] + mu2
    for (x in 1:age) {
        temp <- exp(kappa_1[year + t] + kappa_2[year + t] * (x + 59 - xbar))
        q[x, year + t] <- temp / (1 + temp)
    }
}
```


```{r CBD Model Simulation}
sigma1 <- sd(kappa_1[2:year] - kappa_1[1:(year - 1)])
sigma2 <- sd(kappa_2[2:year] - kappa_2[1:(year - 1)])
sigma12 <- cor(kappa_1[2:year] - kappa_1[1:(year - 1)], kappa_2[2:year] - kappa_2[1:(year - 1)])

# Future Mortality Rate Array
qf <- array(NA, c(age, year + 45, 1000))

# Future level of mortality curve
k1f <- array(NA, c(year + 45, 1000))

# Future gradient of mortality curve
k2f <- array(NA, c(year + 45, 1000))

for (z in 1:1000) {
    qf[1:age, 1:year, z] <- q[1:age, 1:year]
    k1f[1:year, z] <- kappa_1[1:year]
    k2f[1:year, z] <- kappa_2[1:year]
    for (t in 1:45) {
        z1 <- rnorm(1)
        z2 <- sigma12 * z1 + sqrt(1 - sigma12^2) * rnorm(1)
        k1f[year + t, z] <- k1f[year + t - 1, z] + mu1 + sigma1 * z1
        k2f[year + t, z] <- k2f[year + t - 1, z] + mu2 + sigma2 * z2
        for (x in 1:age) {
            temp <- exp(k1f[year + t, z] + k2f[year + t, z] * (x + 59 - xbar))
            qf[x, year + t, z] <- temp / (1 + temp)
        }
    }
}

upper <- numeric()
lower <- numeric()
for (t in 1:45) {
    upper[t] <- quantile(qf[1, year + t, 1:1000], 0.95)
    lower[t] <- quantile(qf[1, year + t, 1:1000], 0.05)
}


plot(
    c(1975:2015), log(q[1, 1:year]),
    xlim = c(1975, 2060), type = "l", ylim = c(-7, -4),
    xlab = "year", ylab = "log q(60,t)",
    main = "Log of Mortality Rate for 60 Year-Olds (CBD Model)"
)
lines(c(2016:2060), log(q[1, (year + 1):(year + 45)]), lty = 2, col = 2)
lines(c(2016:2060), log(upper), lty = 3, col = 2)
lines(c(2016:2060), log(lower), lty = 3, col = 2)
```


```{r CBD Cohort Life Expectancy}
# CBD_Cohort_Life_Expectancy <- array(60, 1:(99 - 60))
CBD_P <- (1 - q[1, year])

for (t in 1:(99 - 60)) {
    CBD_P <- CBD_P * (1 - q[1 + t, year + t])
    # CBD_Cohort_Life_Expectancy[t + 1] <- 
    if (CBD_P >= 0.5) cbde_age <- 60 + t
}

```

According to the CBD Model, the Cohort Life Expectancy of a 60 year old in 2016 living while live to `r cbde_age`


### Comparing LC and CBD Model

The LC model and CBD model appear to reveal the same log(mortality rate) although the CBD model overestimates the rate when it is closer to 2015.

For the futures, the LC model has a linear trend downwards with drop in log(mortality rate) by approximately 1. The CBD model's predictions on the other hand, are lower than the LC model by a small amount (0.2). 

The prediction intervals for the two model differ by considerabl amount. The CBD model's prediction interval remains relatively close to the point forecast, while the LC model's prediction interval grows to a sizeable amount compared to the CBD model.  

# Question 2

```{r NN Data Prep}
# Limiting to Years 1975 - 2015 & Ages 0 - 99
death <- read.delim(file = "Data/Deaths_1x1.txt", sep = "") %>%
    filter(1975 <= Year, Year <= 2015, Age != "110+") %>%
    select(-Female, -Male) %>%
    mutate(Age = strtoi(Age)) %>%
    filter(Age < 90)


# Limiting to Years 1975 - 2015 & Ages 0 - 99
exposure <- read.delim(file = "Data/Exposures_1x1.txt", sep = "") %>%
    filter(1975 <= Year, Year <= 2015, Age != "110+") %>%
    select(-Female, -Male) %>%
    mutate(Age = strtoi(Age)) %>%
    filter(Age < 90)

age <- max(death$Age) - min(death$Age) + 1
year <- 2015 - 1975 + 1

# Death Array
d <- array(NA, c(age, year))

# Exposure Array
e <- array(NA, c(age, year))

# Central Death Rate Array
# m_(x, t) ≈ d_(x,t) / E_(x,t)
m <- array(NA, c(age, year))

# Dataset age incrementer
h <- 1

for (t in 1:year) {
    for (x in 1:age) {
        d[x, t] <- death$Total[h]
        e[x, t] <- exposure$Total[h]
        m[x, t] <- d[x, t] / e[x, t]
        h <- h + 1
    }
}
```

```{r NN Tweakables}
nom_upper <-  0.9
nom_lower <- 0.1
hids <- 3
epoch <- 200000

# Years 1980, 1990, 2000
training_years <- c(6, 16, 26)

# Year 2010
validation_year <- 36

# Year 2015
testing_year <- 41
```

Best Epoch: `r epoch`

Training Years 1980, 1990, 2000

Validation Year 2010

Testing Year 2015

```{r Normalisation}
x <- array(NA, c(2, age * length(training_years)))

x[1, ] <- rep(0:89, times = length(training_years))
x[2, ] <- rep(training_years, each = 90)

mx <- max(log(m[, training_years]))
mn <- min(log(m[, training_years]))
t <- (log(m[, training_years]) - mn) / (mx - mn) * (nom_upper - nom_lower) + nom_lower

t_validation <- (log(m[, validation_year]) - mn) / (mx - mn) * (nom_upper - nom_lower) + nom_lower
t_test <- (log(m[, testing_year]) - mn) / (mx - mn) * (nom_upper - nom_lower) + nom_lower

# transform
temp <- t[, 1]
temp <- append(temp, t[, 2])
t <- append(temp, t[, 3])
```


```{r Hidden Layer Creation}
n <- age
y <- array(NA, c(hids, n))
z <- numeric()

logistic <- function(s) {
    if (s > 700) {
        logistic <- 1
    }
    if (s <= 700) {
        logistic <- exp(s) / (1 + exp(s))
    }
    logistic
}
```

```{r Initialisation}
# Initialisation

# Error Function
e <- numeric()
e_val <- numeric()

# a: weights between input layer and hidden layer
# a: uniform distribution (-1,1)
a <- array(runif(3 * hids, -1, 1), c(3, hids))


# b: {-1, +1}
b <- -1 + rbinom(hids + 1, 1, 0.5) * 2

# tuning parameters
# epsilon: learning rate
epsilona <- array(0.5, c(3, hids))
epsilonb <- rep(0.5, hids + 1)
# lambda, phi, theta: update learning rate
lambda <- 0.1
phi <- 0.5
theta <- 0.7

# hidden nodes; fitted target value (output)
for (k in 1:n) {
    for (j in 1:hids) {
        y[j, k] <- logistic(a[3, j] + a[1, j] * x[1, k] + a[2, j] * x[2, k])
    }
    z[k] <- logistic(b[hids + 1] + sum(b[1:hids] * y[1:hids, k]))
}

# estimation
# epoch: number of iterations
for (h in 1:epoch) {
    # da, db: derivative
    # activation function: logistic function
    # f(s) = exp(s)/(1+exp(s))
    da <- array(0, c(3, hids))
    db <- rep(0, hids + 1)
    # calculate derivatives with respect to a and b
    for (k in 1:n) {
        p <- (z[k] - t[k]) * z[k] * (1 - z[k]) / n
        for (j in 1:hids) {
            db[j] <- db[j] + p * y[j, k]
        }
        db[hids + 1] <- db[hids + 1] + p
        for (j in 1:hids) {
            q <- (z[k] - t[k]) * z[k] * (1 - z[k]) * b[j] * y[j, k] * (1 - y[j, k]) / n
            da[1, j] <- da[1, j] + q * x[1, k]
            da[2, j] <- da[2, j] + q * x[2, k]
            da[3, j] <- da[3, j] + q
        }
    }
    # update learning rate
    if (h > 1) {
        for (i in 1:3) {
            for (j in 1:hids) {
                if (ga[i, j] * da[i, j] > 0) {
                    epsilona[i, j] <- epsilona[i, j] + lambda
                }
                if (ga[i, j] * da[i, j] <= 0) {
                    epsilona[i, j] <- epsilona[i, j] * phi
                }
            }
        }
        for (j in 1:(hids + 1)) {
            if (gb[j] * db[j] > 0) {
                epsilonb[j] <- epsilonb[j] + lambda
            }
            if (gb[j] * db[j] <= 0) {
                epsilonb[j] <- epsilonb[j] * phi
            }
        }
    }
    # update parameters a and b (gradient descent)
    a <- a - epsilona * da
    b <- b - epsilonb * db
    # update accumulated information
    if (h == 1) {
        ga <- da
        gb <- db
    }
    if (h > 1) {
        ga <- theta * ga + (1 - theta) * da
        gb <- theta * gb + (1 - theta) * db
    }
    # update values of hidden nodes and fitted target
    for (k in 1:n) {
        for (j in 1:hids) {
            y[j, k] <- logistic(a[3, j] + a[1, j] * x[1, k] + a[2, j] * x[2, k])
        }
        z[k] <- logistic(b[hids + 1] + sum(b[1:hids] * y[1:hids, k]))
    }
    # calculate error function
    e[h] <- 0.5 * sum((z - t)^2) / n

    # error function for validation
    e_val[h] <- 0.5 * sum((z - t_validation)^2) / n

    # if (h %% 10000 == 0) {
    #     print(paste0("Epoch: ", h))
    # }
}
# print(tail(e_val, n = 1))
```

```{r}
plot(
    c(0:89), (z - 0.1) / 0.8 * (mx - mn) + mn,
    xlab = "age", ylab = "FNN Central Death Rate",
    ylim = c(-10, -2), type = "l", lty = 3
)

# lines(c(0:89), (t - 0.1) / 0.8 * (mx - mn) + mn)
```